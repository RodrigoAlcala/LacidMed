import SimpleITK as sitk
import numpy as np
import matplotlib.pyplot as plt
import os
from skimage import data  
from PIL import Image
from scipy.ndimage import label
from skimage import data, img_as_float
from skimage.filters import gaussian, sobel
from skimage.segmentation import active_contour
from skimage.draw import circle_perimeter

# lacid_med directory append.
import sys
sys.path.append("c:/codigos_tesis/Repositorio/LacidMed")
from lacid_med.src.handler.loader import DicomLoaderMRI
from lacid_med.src.handler.writer import SingleFileWriter, MultipleFileWriter, Deanonymizer
from lacid_med.src.processing.filters import Filters
from lacid_med.src.visualization.plotter import DicomPlotter
from lacid_med.src.visualization.histograms import HistogramGenerator
from lacid_med.src.processing.fitting import Fitting
from lacid_med.src.processing.operations import Operations
from lacid_med.src.processing.segmentation import Segmentation

# Set directory path
directory_path_1 = "C:/codigos_tesis/castro_nelida"

# Load MRI data
loader_1 = DicomLoaderMRI(directory_path=directory_path_1) 
vol_array_1 = loader_1.volumetric_array
scaler_1 = Operations(volumetric_array_1=vol_array_1)
vol_array_1 = scaler_1.scale_matrix_to_value()

# Background removal
segmenter_1 = Segmentation(volumetric_array=vol_array_1)
bg_removed = segmenter_1.background_remover_volumetric(background_seed_point=[10,10,10], background_multiplier=3, background_number_of_iterations=10)

# Apply Sobel filter to the entire volume
filter_1 = Filters(sequence_directory=directory_path_1)
sobel_filtered = filter_1.sobel_image_filter(img_arr=bg_removed)
scaler_2 = Operations(volumetric_array_1=sobel_filtered)
sobel_filtered = scaler_2.scale_matrix_to_value()

# Apply thresholding
segmenter_2 = Segmentation(volumetric_array=sobel_filtered)
sobel_tresholded = segmenter_2.threshold_segmentation(lower_threshold=70)
scaler_3 = Operations(volumetric_array_1=sobel_tresholded)
sobel_tresholded = scaler_3.scale_matrix_to_value()

# Active contours test to fit one image.
volume_contour = []
#cy, cx = image.shape[0] // 2, image.shape[1] // 2  
cy, cx = 80, 140
r = 130
s = np.linspace(0, 2*np.pi, 400)
init = np.array([cy + r*np.sin(s), cx + r*np.cos(s)]).T
for i in range(120, vol_array_1.shape[2]):
    image = vol_array_1[:, :, i]
    image_smooth = gaussian(image, sigma=2)
    snake = active_contour(image_smooth, init, alpha=0.1, beta=0.1, gamma=0.01, w_line=1,w_edge=1)
    volume_contour.append([snake[:, 1], snake[:, 0]])

#print(volume_contour.shape)

writer = MultipleFileWriter(loader_1.sorted_files)
writer.write(volume_contour,'C:/codigos_tesis/countour_dicom')

volume_contour=np.dstack(volume_contour)
sitk.WriteImage(sitk.GetImageFromArray(volume_contour), "C:/codigos_tesis/active_countour.nrrd")

# Visualization
fig, axs = plt.subplots(1, 4, figsize=(12, 6))
axs[0].imshow(vol_array_1[:, :, 20], cmap='gray')
axs[0].set_title('Original Image')
axs[0].axis('off')

axs[1].imshow(sobel_filtered[:, :, 20], cmap='gray')
axs[1].set_title('Sobel')
axs[1].axis('off')

axs[2].imshow(sobel_tresholded[:, :, 20], cmap='gray')
axs[2].set_title('Sobel tresholded')
axs[2].axis('off')

axs[3].imshow(image, cmap='gray')
#axs[3].plot(init[:, 1], init[:, 0], '--r', lw=3, label="Initial Contour")
axs[3].plot(snake[:, 1], snake[:, 0], '-b', lw=3, label="Final Contour")
axs[3].set_title('Active Contour on MRI Slice')
axs[3].axis('off')

plt.show()

# Save images (optional)
# sitk.WriteImage(sitk.GetImageFromArray(sobel_tresholded), "C:/Users/santi/Desktop/Fuesmen/imagenes/skull_remover/sobel_tresholded/sobel_tresholded.nrrd")
# writer = MultipleFileWriter(loader_1.sorted_files)
# writer.write(tresholded, 'C:/Users/santi/Desktop/Fuesmen/imagenes/skull_remover/tresholded')