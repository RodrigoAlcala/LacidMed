import SimpleITK as sitk
import numpy as np
import matplotlib.pyplot as plt
import os
from skimage import data  
from PIL import Image
from scipy.ndimage import label

# lacid_med directory append.
import sys
sys.path.append("C:/Users/santi/Desktop/Fuesmen/code/LacidMed")
from lacid_med.src.handler.loader import DicomLoaderMRI
from lacid_med.src.handler.writer import SingleFileWriter, MultipleFileWriter, Deanonymizer
from lacid_med.src.processing.filters import Filters
from lacid_med.src.visualization.plotter import DicomPlotter
from lacid_med.src.visualization.histograms import HistogramGenerator
from lacid_med.src.processing.fitting import Fitting
from lacid_med.src.processing.operations import Operations
from lacid_med.src.processing.segmentation import Segmentation

def non_maximum_suppression(gradient_magnitude, gradient_direction):
    rows, cols = gradient_magnitude.shape
    output = np.zeros((rows, cols), dtype=np.float32)

    angle = gradient_direction * 180.0 / np.pi
    angle[angle < 0] += 180

    for i in range(1, rows-1):
        for j in range(1, cols-1):
            q = 255
            r = 255

            # Angle 0
            if (0 <= angle[i, j] < 22.5) or (157.5 <= angle[i, j] <= 180):
                q = gradient_magnitude[i, j+1]
                r = gradient_magnitude[i, j-1]
            # Angle 45
            elif 22.5 <= angle[i, j] < 67.5:
                q = gradient_magnitude[i+1, j-1]
                r = gradient_magnitude[i-1, j+1]
            # Angle 90
            elif 67.5 <= angle[i, j] < 112.5:
                q = gradient_magnitude[i+1, j]
                r = gradient_magnitude[i-1, j]
            # Angle 135
            elif 112.5 <= angle[i, j] < 157.5:
                q = gradient_magnitude[i-1, j-1]
                r = gradient_magnitude[i+1, j+1]

            if gradient_magnitude[i, j] >= q and gradient_magnitude[i, j] >= r:
                output[i, j] = gradient_magnitude[i, j]
            else:
                output[i, j] = 0

    return output

# Set directory path
directory_path_1 = "C:/Users/santi/Desktop/Fuesmen/imagenes/ZTE_H01_descomp"

# Load MRI data
loader_1 = DicomLoaderMRI(directory_path=directory_path_1) 
vol_array_1 = loader_1.volumetric_array 

# Background removal
segmenter_1 = Segmentation(volumetric_array=vol_array_1)
bg_removed = segmenter_1.background_remover_volumetric(background_seed_point=[10,10,10], background_multiplier=5, background_number_of_iterations=10)

# Apply Sobel filter
filter_1 = Filters(sequence_directory=directory_path_1)
sobel_filtered = filter_1.sobel_image_filter(img_arr=vol_array_1)

# Initialize arrays for storing gradient magnitude and direction
gradient_magnitude = np.zeros_like(sobel_filtered)
gradient_direction = np.zeros_like(sobel_filtered)

# Compute gradient magnitude and direction for NMS
for z in range(sobel_filtered.shape[2]):  # Iterate through slices
    sobel_x = sobel_filtered[:, :, z]
    sobel_y = np.zeros_like(sobel_x)  # Assuming sobel_y is missing, set it to zero or compute it similarly

    gradient_magnitude[:, :, z] = np.sqrt(sobel_x**2 + sobel_y**2)
    gradient_direction[:, :, z] = np.arctan2(sobel_y, sobel_x)

# Apply Non-Maximum Suppression
nms_result = np.zeros_like(gradient_magnitude)
for z in range(gradient_magnitude.shape[2]):  # Iterate through slices
    nms_result[:, :, z] = non_maximum_suppression(gradient_magnitude[:, :, z], gradient_direction[:, :, z])

# Scale the Sobel filtered image
operator_1 = Operations(volumetric_array_1=nms_result)
nms_scaled = operator_1.scale_matrix_to_value()

# Thresholding
segmenter_2 = Segmentation(volumetric_array=nms_scaled)
nms_tresholded = segmenter_2.threshold_segmentation(lower_threshold=30)



# Bilateral filter parameters
domainSigma = 2.0  # Spatial smoothing parameter
rangeSigma = 50.0  # Intensity smoothing parameter
# Apply bilateral filter
sobel_filtered_sitk = sitk.GetImageFromArray(sobel_filtered)
bilateral_filtered = sitk.Bilateral(sobel_filtered_sitk, domainSigma, rangeSigma)
# Convert to numpy array for visualization
bilateral_array = sitk.GetArrayFromImage(bilateral_filtered)



# Visualization
fig, axs = plt.subplots(1, 3, figsize=(12, 6))
axs[0].imshow(vol_array_1[:, :, 80], cmap='gray')
axs[0].set_title('Original Image')
axs[0].axis('off')

axs[1].imshow(sobel_filtered[:, :, 80], cmap='gray')
axs[1].set_title('Sobel')
axs[1].axis('off')

axs[2].imshow(bilateral_filtered[:, :, 80], cmap='gray')
axs[2].set_title('Laplacian')
axs[2].axis('off')

plt.show()

# Save images (optional)
# sitk.WriteImage(sitk.GetImageFromArray(sobel_tresholded), "C:/Users/santi/Desktop/Fuesmen/imagenes/skull_remover/sobel_tresholded/sobel_tresholded.nrrd")
# writer = MultipleFileWriter(loader_1.sorted_files)
# writer.write(tresholded, 'C:/Users/santi/Desktop/Fuesmen/imagenes/skull_remover/tresholded')
